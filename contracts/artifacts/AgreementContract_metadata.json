{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_dataUsageContractAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "userAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "actorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "usageID",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "actorAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "userAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "serviceName",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "servicePurpose",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "operation",
								"type": "string"
							},
							{
								"internalType": "string[]",
								"name": "personalData",
								"type": "string[]"
							}
						],
						"indexed": false,
						"internalType": "struct DataUsage",
						"name": "dataUsage",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "consent",
						"type": "bool"
					}
				],
				"name": "UserVote",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getContractAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "usageID",
						"type": "uint256"
					}
				],
				"name": "retrieveDataUsage",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "actorAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "userAddress",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "serviceName",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "servicePurpose",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "operation",
								"type": "string"
							},
							{
								"internalType": "string[]",
								"name": "personalData",
								"type": "string[]"
							}
						],
						"internalType": "struct DataUsage",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "usageID",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "consent",
						"type": "bool"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "generate a new contract"
				},
				"getContractAddress()": {
					"details": "get the current contract address"
				},
				"retrieveDataUsage(uint256)": {
					"details": "The Retrieve function uses the address of a GDPR compliance contract to provide a data subject information recorded by an actor in the Blockchain"
				},
				"vote(uint256,bool)": {
					"details": "submits a data subjectâ€™s votes (positive/negative consent) to the Blockchain"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Actor use some data of a User Subject, generate the smart contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SC_Agreement.sol": "AgreementContract"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/SC_Agreement.sol": {
			"keccak256": "0xf6f2cb1e03b9337c457fbe84715d477281969c67543b6921553157aabcade748",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5f8ce4a7fcdb401c1781b6256ff763d88fde3f3b48a0582e22482258d7f61c9e",
				"dweb:/ipfs/QmVSiG7Mf4xC3ikRYk16SV3vrCDCRd78YcRJfWZXHzBgGb"
			]
		},
		"contracts/SC_DataUsage.sol": {
			"keccak256": "0xb9ffec2cbc71c43eaa019fdd27497d3c2a3c0ec06b6dc9c43960dd9a3877bf2f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6505bdc5fc6c62479e8742e925461af8d9d3d2b4f775c57616d2ef514931c21f",
				"dweb:/ipfs/QmRHSubhP4RR2Rcr3EqKeBj9KFcx99Hcv1wNVCSSzDoo7H"
			]
		}
	},
	"version": 1
}